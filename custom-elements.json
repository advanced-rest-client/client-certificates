{
  "version": "experimental",
  "tags": [
    {
      "name": "cc-authorization-method",
      "path": "./cc-authorization-method.js",
      "attributes": [
        {
          "name": "selected",
          "description": "The id of selected certificate.",
          "type": "string"
        },
        {
          "name": "none",
          "description": "When set it renders `none` option in the list of certificates.",
          "type": "boolean"
        },
        {
          "name": "importButton",
          "description": "When set it renders `import certificate` button. Handle ARC navigation event to navigate to the import panel.",
          "type": "boolean"
        },
        {
          "name": "type",
          "description": "Authorization method type.\n\nSupported types are (case insensitive, spaces sensitive):\n\n- Basic\n- Client certificate\n- Digest\n- NTLM\n- OAuth 1\n- OAuth 2\n\nDepending on selected type different properties are used.\nFor example Basic type only uses `username` and `password` properties,\nwhile NTLM also uses `domain` property.\n\nSee readme file for detailed list of properties depending on selected type.",
          "type": "string"
        },
        {
          "name": "readOnly",
          "description": "When set the editor is in read only mode.",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "When set the inputs are disabled",
          "type": "boolean"
        },
        {
          "name": "compatibility",
          "description": "Enables compatibility with Anypoint components.",
          "type": "boolean"
        },
        {
          "name": "outlined",
          "description": "Enables Material Design outlined style",
          "type": "boolean"
        },
        {
          "name": "narrow",
          "description": "Renders mobile friendly view.",
          "type": "boolean"
        },
        {
          "name": "username",
          "type": "string"
        },
        {
          "name": "password",
          "type": "string"
        },
        {
          "name": "redirectUri",
          "type": "string"
        },
        {
          "name": "accessTokenUri",
          "type": "string"
        },
        {
          "name": "authorizationUri",
          "type": "string"
        },
        {
          "name": "domain",
          "description": "Authorization domain\n\nUsed in the following types:\n- NTLM",
          "type": "string | undefined"
        },
        {
          "name": "algorithm",
          "description": "The algorithm used to hash the response for Digest authorization.\n\nIt can be either `MD5` or `MD5-sess`.\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "qop",
          "description": "The quality of protection value for the digest response.\nEither '', 'auth' or 'auth-int'\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "nc",
          "description": "Nonce count - increments with each request used with the same nonce\n\nUsed in the following types:\n- Digest",
          "type": "number"
        },
        {
          "name": "cnonce",
          "description": "Client nonce\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "opaque",
          "description": "A string of data specified by the server\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "response",
          "description": "Hashed response to server challenge\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "httpMethod",
          "description": "Request HTTP method\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "requestUrl",
          "description": "Current request URL.\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "requestBody",
          "description": "Current request body.\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "consumerKey",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "consumerSecret",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "token",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "tokenSecret",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "timestamp",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "nonce",
          "description": "Server issued nonce for Digest authorization.\n\nUsed in the following types:\n- Digest\n- OAuth 1",
          "type": "string"
        },
        {
          "name": "realm",
          "description": "Server issued realm for Digest authorization.\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "signatureMethod",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "requestTokenUri",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "authTokenMethod",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "authParamsLocation",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "grantType",
          "description": "Selected authorization grand type.",
          "type": "string"
        },
        {
          "name": "clientId",
          "description": "The client ID for the auth token.",
          "type": "string"
        },
        {
          "name": "clientSecret",
          "description": "The client secret. It to be used when selected server flow.",
          "type": "string"
        },
        {
          "name": "preventCustomScopes",
          "description": "If true then the `oauth2-scope-selector` will disallow to add a scope that is not\nin the `allowedScopes` list. Has no effect if the `allowedScopes` is not set.",
          "type": "boolean"
        },
        {
          "name": "accessToken",
          "description": "When the user authorized the app it should be set to the token value.\nThis element do not perform authorization. Other elements must intercept\nthe token request event and perform the authorization.",
          "type": "string"
        },
        {
          "name": "tokenType",
          "description": "By default it is \"bearer\" as the only one defined in OAuth 2.0 spec.\nIf the token response contains `tokenType` property then this value is updated.",
          "type": "string | undefined"
        },
        {
          "name": "advanced",
          "description": "If set it renders authorization url, token url and scopes as advanced options\nwhich are then invisible by default. User can oen setting using the UI.",
          "type": "boolean | undefined"
        },
        {
          "name": "advancedOpened",
          "description": "If true then the advanced options are opened.",
          "type": "boolean | undefined"
        },
        {
          "name": "noGrantType",
          "description": "If set, the response type selector is hidden from the UI.",
          "type": "boolean | undefined"
        },
        {
          "name": "oauthDeliveryMethod",
          "description": "Informs about what filed of the authenticated request the token property should be set.\nBy default the value is `header` which corresponds to the `authorization` by default,\nbut it is configured by the `deliveryName` property.\n\nThis can be used by the AMF model when the API spec defines where the access token should be\nput in the authenticated request.",
          "type": "\"header\" | \"query\" | \"body\" | undefined",
          "default": "\"header\""
        },
        {
          "name": "oauthDeliveryName",
          "description": "The name of the authenticated request property that carries the token.\nBy default it is `authorization` which corresponds to `header` value of the `deliveryMethod` property.\n\nBy setting both `deliveryMethod` and `deliveryName` you instruct the application (assuming it reads this values)\nwhere to put the authorization token.",
          "type": "string | undefined",
          "default": "\"authorization\""
        },
        {
          "name": "baseUri",
          "description": "The base URI to use to construct the correct URLs to the authorization endpoints.\n\nWhen the paths are relative then base URI is added to the path.\nRelative paths must start with '/'.\n\nNote, URL processing is happening internally in the component. The produced authorize event\nwill have base URI already applied.",
          "type": "string | undefined"
        },
        {
          "name": "noPkce",
          "description": "When this property is set then the PKCE option is not rendered for the \n`authorization_code`. This is mainly meant to be used by the `api-authorization-method`\nto keep this control disabled and override generated settings when the API spec\nsays that the PKCE is supported.",
          "type": "boolean | undefined"
        },
        {
          "name": "pkce",
          "description": "Whether or not the PKCE extension is enabled for this authorization configuration.\nNote, PKCE, per the spec, is only available for `authorization_code` grantType.",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "selected",
          "attribute": "selected",
          "description": "The id of selected certificate.",
          "type": "string"
        },
        {
          "name": "none",
          "attribute": "none",
          "description": "When set it renders `none` option in the list of certificates.",
          "type": "boolean"
        },
        {
          "name": "importButton",
          "attribute": "importButton",
          "description": "When set it renders `import certificate` button. Handle ARC navigation event to navigate to the import panel.",
          "type": "boolean"
        },
        {
          "name": "items",
          "description": "The list of certificates to render.",
          "type": "ARCCertificateIndex[]"
        },
        {
          "name": "loading",
          "description": "True when loading data from the datastore.",
          "type": "boolean"
        },
        {
          "name": "hasItems",
          "description": "`true` if `items` is set and has cookies",
          "type": "boolean"
        },
        {
          "name": "dataUnavailable",
          "description": "A computed flag that determines that the query to the data store\nhas been performed and empty result was returned.\nThis can be true only if not in search.",
          "type": "boolean"
        },
        {
          "name": "pageToken",
          "description": "The latest page token received from the store.",
          "type": "string"
        },
        {
          "name": "pageLimit",
          "description": "The page limit to use when querying for the data",
          "type": "string"
        },
        {
          "name": "hasMoreResults",
          "description": "Set to false when the query to the data store resulted in incomplete size of the results.",
          "type": "boolean"
        },
        {
          "name": "styles",
          "type": "CSSResult"
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Authorization method type.\n\nSupported types are (case insensitive, spaces sensitive):\n\n- Basic\n- Client certificate\n- Digest\n- NTLM\n- OAuth 1\n- OAuth 2\n\nDepending on selected type different properties are used.\nFor example Basic type only uses `username` and `password` properties,\nwhile NTLM also uses `domain` property.\n\nSee readme file for detailed list of properties depending on selected type.",
          "type": "string"
        },
        {
          "name": "readOnly",
          "attribute": "readOnly",
          "description": "When set the editor is in read only mode.",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "When set the inputs are disabled",
          "type": "boolean"
        },
        {
          "name": "compatibility",
          "attribute": "compatibility",
          "description": "Enables compatibility with Anypoint components.",
          "type": "boolean"
        },
        {
          "name": "outlined",
          "attribute": "outlined",
          "description": "Enables Material Design outlined style",
          "type": "boolean"
        },
        {
          "name": "narrow",
          "attribute": "narrow",
          "description": "Renders mobile friendly view.",
          "type": "boolean"
        },
        {
          "name": "authorizing",
          "description": "Used in the following types:\n- OAuth 1\n- OAuth 2",
          "type": "boolean | null"
        },
        {
          "name": "username",
          "attribute": "username",
          "type": "string"
        },
        {
          "name": "password",
          "attribute": "password",
          "type": "string"
        },
        {
          "name": "redirectUri",
          "attribute": "redirectUri",
          "type": "string"
        },
        {
          "name": "accessTokenUri",
          "attribute": "accessTokenUri",
          "type": "string"
        },
        {
          "name": "authorizationUri",
          "attribute": "authorizationUri",
          "type": "string"
        },
        {
          "name": "onchange",
          "type": "EventListener | null"
        },
        {
          "name": "eventsTarget",
          "description": "By default the element listens on the `window` object. If this value is set,\nthen all events listeners will be attached to this object instead of `window`.",
          "type": "EventTarget"
        },
        {
          "name": "domain",
          "attribute": "domain",
          "description": "Authorization domain\n\nUsed in the following types:\n- NTLM",
          "type": "string | undefined"
        },
        {
          "name": "algorithm",
          "attribute": "algorithm",
          "description": "The algorithm used to hash the response for Digest authorization.\n\nIt can be either `MD5` or `MD5-sess`.\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "qop",
          "attribute": "qop",
          "description": "The quality of protection value for the digest response.\nEither '', 'auth' or 'auth-int'\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "nc",
          "attribute": "nc",
          "description": "Nonce count - increments with each request used with the same nonce\n\nUsed in the following types:\n- Digest",
          "type": "number"
        },
        {
          "name": "cnonce",
          "attribute": "cnonce",
          "description": "Client nonce\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "opaque",
          "attribute": "opaque",
          "description": "A string of data specified by the server\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "response",
          "attribute": "response",
          "description": "Hashed response to server challenge\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "httpMethod",
          "attribute": "httpMethod",
          "description": "Request HTTP method\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "requestUrl",
          "attribute": "requestUrl",
          "description": "Current request URL.\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "requestBody",
          "attribute": "requestBody",
          "description": "Current request body.\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "consumerKey",
          "attribute": "consumerKey",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "consumerSecret",
          "attribute": "consumerSecret",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "token",
          "attribute": "token",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "tokenSecret",
          "attribute": "tokenSecret",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "timestamp",
          "attribute": "timestamp",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "nonce",
          "attribute": "nonce",
          "description": "Server issued nonce for Digest authorization.\n\nUsed in the following types:\n- Digest\n- OAuth 1",
          "type": "string"
        },
        {
          "name": "realm",
          "attribute": "realm",
          "description": "Server issued realm for Digest authorization.\n\nUsed in the following types:\n- Digest",
          "type": "string"
        },
        {
          "name": "signatureMethod",
          "attribute": "signatureMethod",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "requestTokenUri",
          "attribute": "requestTokenUri",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "authTokenMethod",
          "attribute": "authTokenMethod",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "authParamsLocation",
          "attribute": "authParamsLocation",
          "description": "Used by OAuth 1",
          "type": "string"
        },
        {
          "name": "signatureMethods",
          "description": "Used by OAuth 1",
          "type": "string[]"
        },
        {
          "name": "isCustomGrantType",
          "type": "boolean"
        },
        {
          "name": "clientIdRequired",
          "type": "boolean"
        },
        {
          "name": "oauth2ClientSecretRendered",
          "type": "boolean"
        },
        {
          "name": "oauth2AuthorizationUriRendered",
          "type": "boolean"
        },
        {
          "name": "oauth2AccessTokenUriRendered",
          "type": "boolean"
        },
        {
          "name": "oauth2PasswordRendered",
          "type": "boolean"
        },
        {
          "name": "grantType",
          "attribute": "grantType",
          "description": "Selected authorization grand type.",
          "type": "string"
        },
        {
          "name": "clientId",
          "attribute": "clientId",
          "description": "The client ID for the auth token.",
          "type": "string"
        },
        {
          "name": "clientSecret",
          "attribute": "clientSecret",
          "description": "The client secret. It to be used when selected server flow.",
          "type": "string"
        },
        {
          "name": "scopes",
          "description": "List of user selected scopes.\nIt can be pre-populated with list of scopes (array of strings).",
          "type": "string[]"
        },
        {
          "name": "allowedScopes",
          "description": "List of pre-defined scopes to choose from. It will be passed to the `oauth2-scope-selector`\nelement.",
          "type": "string[]"
        },
        {
          "name": "preventCustomScopes",
          "attribute": "preventCustomScopes",
          "description": "If true then the `oauth2-scope-selector` will disallow to add a scope that is not\nin the `allowedScopes` list. Has no effect if the `allowedScopes` is not set.",
          "type": "boolean"
        },
        {
          "name": "accessToken",
          "attribute": "accessToken",
          "description": "When the user authorized the app it should be set to the token value.\nThis element do not perform authorization. Other elements must intercept\nthe token request event and perform the authorization.",
          "type": "string"
        },
        {
          "name": "tokenType",
          "attribute": "tokenType",
          "description": "By default it is \"bearer\" as the only one defined in OAuth 2.0 spec.\nIf the token response contains `tokenType` property then this value is updated.",
          "type": "string | undefined"
        },
        {
          "name": "grantTypes",
          "description": "Currently available response types.",
          "type": "GrantType[] | undefined"
        },
        {
          "name": "advanced",
          "attribute": "advanced",
          "description": "If set it renders authorization url, token url and scopes as advanced options\nwhich are then invisible by default. User can oen setting using the UI.",
          "type": "boolean | undefined"
        },
        {
          "name": "advancedOpened",
          "attribute": "advancedOpened",
          "description": "If true then the advanced options are opened.",
          "type": "boolean | undefined"
        },
        {
          "name": "noGrantType",
          "attribute": "noGrantType",
          "description": "If set, the response type selector is hidden from the UI.",
          "type": "boolean | undefined"
        },
        {
          "name": "oauthDeliveryMethod",
          "attribute": "oauthDeliveryMethod",
          "description": "Informs about what filed of the authenticated request the token property should be set.\nBy default the value is `header` which corresponds to the `authorization` by default,\nbut it is configured by the `deliveryName` property.\n\nThis can be used by the AMF model when the API spec defines where the access token should be\nput in the authenticated request.",
          "type": "\"header\" | \"query\" | \"body\" | undefined",
          "default": "\"header\""
        },
        {
          "name": "oauthDeliveryName",
          "attribute": "oauthDeliveryName",
          "description": "The name of the authenticated request property that carries the token.\nBy default it is `authorization` which corresponds to `header` value of the `deliveryMethod` property.\n\nBy setting both `deliveryMethod` and `deliveryName` you instruct the application (assuming it reads this values)\nwhere to put the authorization token.",
          "type": "string | undefined",
          "default": "\"authorization\""
        },
        {
          "name": "baseUri",
          "attribute": "baseUri",
          "description": "The base URI to use to construct the correct URLs to the authorization endpoints.\n\nWhen the paths are relative then base URI is added to the path.\nRelative paths must start with '/'.\n\nNote, URL processing is happening internally in the component. The produced authorize event\nwill have base URI already applied.",
          "type": "string | undefined"
        },
        {
          "name": "lastErrorMessage",
          "description": "The error message returned by the authorization library.\nIt renders error dialog when an error ocurred. \nIt is automatically cleared when the user request the token again.",
          "type": "string | undefined"
        },
        {
          "name": "noPkce",
          "attribute": "noPkce",
          "description": "When this property is set then the PKCE option is not rendered for the \n`authorization_code`. This is mainly meant to be used by the `api-authorization-method`\nto keep this control disabled and override generated settings when the API spec\nsays that the PKCE is supported.",
          "type": "boolean | undefined"
        },
        {
          "name": "pkce",
          "attribute": "pkce",
          "description": "Whether or not the PKCE extension is enabled for this authorization configuration.\nNote, PKCE, per the spec, is only available for `authorization_code` grantType.",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "When authorization state change"
        }
      ]
    },
    {
      "name": "certificate-details",
      "path": "./certificate-details.js",
      "description": "A view that render a certificate details.\n\nSet `certId` property to certificate's identifier and the element\nqueries for the details and populates the view.",
      "attributes": [
        {
          "name": "compatibility",
          "description": "Enables compatibility with Anypoint components.",
          "type": "boolean"
        },
        {
          "name": "querying",
          "description": "True when currently querying for the certificate",
          "type": "boolean"
        },
        {
          "name": "certId",
          "description": "The ID of the certificate to render.\nIt should not be set when setting `certificate` object.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "compatibility",
          "attribute": "compatibility",
          "description": "Enables compatibility with Anypoint components.",
          "type": "boolean"
        },
        {
          "name": "querying",
          "attribute": "querying",
          "description": "True when currently querying for the certificate",
          "type": "boolean"
        },
        {
          "name": "certId",
          "attribute": "certId",
          "description": "The ID of the certificate to render.\nIt should not be set when setting `certificate` object.",
          "type": "string"
        },
        {
          "name": "certificate",
          "description": "A certificate",
          "type": "ARCClientCertificate"
        }
      ]
    },
    {
      "name": "certificate-import",
      "path": "./certificate-import.js",
      "description": "A view to import a client certificate into the application.",
      "attributes": [
        {
          "name": "outlined",
          "description": "Enables outlined theme.",
          "type": "boolean"
        },
        {
          "name": "compatibility",
          "description": "Enables compatibility with Anypoint components.",
          "type": "boolean"
        },
        {
          "name": "importType",
          "description": "Either `pem` or `p12`.",
          "type": "string"
        },
        {
          "name": "name",
          "description": "Import name",
          "type": "string"
        },
        {
          "name": "loading",
          "description": "True when the user clicked on the import button",
          "type": "boolean"
        },
        {
          "name": "page",
          "type": "number"
        },
        {
          "name": "certificatePassword",
          "description": "The password for the certificate to use.",
          "type": "string"
        },
        {
          "name": "keyPassword",
          "description": "The password for the key certificate to use.",
          "type": "string"
        },
        {
          "name": "certificateHasPassword",
          "description": "Whether the certificate file is password protected,",
          "type": "boolean"
        },
        {
          "name": "keyHasPassword",
          "description": "Whether the key file is password protected,",
          "type": "boolean"
        },
        {
          "name": "errorMessage",
          "description": "The error message to render, if any.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "outlined",
          "attribute": "outlined",
          "description": "Enables outlined theme.",
          "type": "boolean"
        },
        {
          "name": "compatibility",
          "attribute": "compatibility",
          "description": "Enables compatibility with Anypoint components.",
          "type": "boolean"
        },
        {
          "name": "importType",
          "attribute": "importType",
          "description": "Either `pem` or `p12`.",
          "type": "string"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Import name",
          "type": "string"
        },
        {
          "name": "loading",
          "attribute": "loading",
          "description": "True when the user clicked on the import button",
          "type": "boolean"
        },
        {
          "name": "page",
          "attribute": "page",
          "type": "number"
        },
        {
          "name": "certificateFile",
          "type": "File"
        },
        {
          "name": "keyFile",
          "type": "File"
        },
        {
          "name": "certificatePassword",
          "attribute": "certificatePassword",
          "description": "The password for the certificate to use.",
          "type": "string"
        },
        {
          "name": "keyPassword",
          "attribute": "keyPassword",
          "description": "The password for the key certificate to use.",
          "type": "string"
        },
        {
          "name": "certificateHasPassword",
          "attribute": "certificateHasPassword",
          "description": "Whether the certificate file is password protected,",
          "type": "boolean"
        },
        {
          "name": "keyHasPassword",
          "attribute": "keyHasPassword",
          "description": "Whether the key file is password protected,",
          "type": "boolean"
        },
        {
          "name": "errorMessage",
          "attribute": "errorMessage",
          "description": "The error message to render, if any.",
          "type": "string"
        },
        {
          "name": "hasKeyImport",
          "type": "boolean"
        },
        {
          "name": "hasKeyPasswordInput",
          "type": "boolean"
        },
        {
          "name": "acceptDisabled",
          "type": "boolean"
        },
        {
          "name": "importInvalid",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "close",
          "description": "When the parent should close the import dialog."
        }
      ]
    },
    {
      "name": "client-certificates-panel",
      "path": "./client-certificates-panel.js",
      "description": "A view that renders list of client certificates installed in the application.\n\nIt allows to preview certificate details, add new certificate, and\nto remove certificate from the store.\n\nThe element uses web events to communicate with the data store. Your application\ncan have own implementation but we suggest using `@advanced-rest-client/arc-models`\nwith `client-certificate-model` to store certificates in browser's internal\ndata store.\nConsider this when 3rd party scripts runs on your page.",
      "attributes": [
        {
          "name": "outlined",
          "description": "Enables outlined theme.",
          "type": "boolean"
        },
        {
          "name": "compatibility",
          "description": "Enables compatibility with Anypoint components.",
          "type": "boolean"
        },
        {
          "name": "certDetailsOpened",
          "description": "When set a certificate details dialog is opened.",
          "type": "boolean"
        },
        {
          "name": "openedDetailsId",
          "description": "An ID of the certificate to be passed on the details view element.",
          "type": "string"
        },
        {
          "name": "page",
          "type": "number"
        },
        {
          "name": "exportOptionsOpened",
          "description": "Indicates that the export options panel is currently rendered.",
          "type": "boolean"
        },
        {
          "name": "errorMessage",
          "description": "The last error message",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "outlined",
          "attribute": "outlined",
          "description": "Enables outlined theme.",
          "type": "boolean"
        },
        {
          "name": "compatibility",
          "attribute": "compatibility",
          "description": "Enables compatibility with Anypoint components.",
          "type": "boolean"
        },
        {
          "name": "certDetailsOpened",
          "attribute": "certDetailsOpened",
          "description": "When set a certificate details dialog is opened.",
          "type": "boolean"
        },
        {
          "name": "openedDetailsId",
          "attribute": "openedDetailsId",
          "description": "An ID of the certificate to be passed on the details view element.",
          "type": "string"
        },
        {
          "name": "page",
          "attribute": "page",
          "type": "number"
        },
        {
          "name": "exportOptionsOpened",
          "attribute": "exportOptionsOpened",
          "description": "Indicates that the export options panel is currently rendered.",
          "type": "boolean"
        },
        {
          "name": "errorMessage",
          "attribute": "errorMessage",
          "description": "The last error message",
          "type": "string"
        },
        {
          "name": "items",
          "description": "The list of certificates to render.",
          "type": "ARCCertificateIndex[]"
        },
        {
          "name": "loading",
          "description": "True when loading data from the datastore.",
          "type": "boolean"
        },
        {
          "name": "hasItems",
          "description": "`true` if `items` is set and has cookies",
          "type": "boolean"
        },
        {
          "name": "dataUnavailable",
          "description": "A computed flag that determines that the query to the data store\nhas been performed and empty result was returned.\nThis can be true only if not in search.",
          "type": "boolean"
        },
        {
          "name": "pageToken",
          "description": "The latest page token received from the store.",
          "type": "string"
        },
        {
          "name": "pageLimit",
          "description": "The page limit to use when querying for the data",
          "type": "string"
        },
        {
          "name": "hasMoreResults",
          "description": "Set to false when the query to the data store resulted in incomplete size of the results.",
          "type": "boolean"
        }
      ]
    }
  ]
}